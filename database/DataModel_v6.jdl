entity CompanyUser (t_company_user) {
	name String required,
    email String unique required
}


entity Company (t_company) {
	companyName String unique required,
	companyGroup String
}

entity CompanyGates (t_company_gates) {
	gateName String required,
    companyGroup String unique required
}


entity File (t_file){
	fileName String required,
    content Blob,
    createdDate Instant,
    createdBy String,
    version Float
}


entity Range (t_range){
	range RangeType required,
    value Integer required,
    description String
}

entity DataSource (t_data_source) {
	dataSourceName String unique required,
    type Type required,
    yearPublished Integer required,
    fileName String,
    createdDate Instant
}

entity DataSourceValue (t_data_source_value) {
	country String required,
    iso3 String maxlength(3),
    iso2 String maxlength(2),
    continent String,
    score Float
}


entity Region (t_region) {
	name String unique required,
    type Type required,
    description String
}

entity RegionValue (t_region_value) {
	country String,
    iso3 String maxlength(3),
    iso2 String maxlength(2),
    continent String,
}


entity Country(t_country){
	country String required unique,
    iso3 String maxlength(3),
    iso2 String maxlength(2),
    continent String,
}

entity Report(t_reports) {
	reportName String,
	companyUserName String,
    company String,
    type Type,
    createdDate Instant,
    createdBy String,
}

entity ReportValues(t_report_value) {
	name String,
    value String
}


relationship OneToMany {
    Report to ReportValues,
}


relationship OneToMany {
    CompanyUser to DataSource,
    DataSource to DataSourceValue,
}

relationship OneToMany {
    Company to CompanyUser,
    Company to CompanyGates,
}


relationship OneToMany {
    CompanyUser to Range,
}


relationship OneToMany {
    CompanyUser to File,
}


relationship OneToMany {
    CompanyUser to Region,
    Region to RegionValue,
}



enum Type {
    Global, Company, Custom
}

enum RangeType {
    Max, Between, Min
}

//  ** PAGINATION  **
paginate * with pagination

// ** DTOs **
dto * with mapstruct

// ** Service **
service * with serviceClass
